# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DTediiAlz73L-vyq5GdgXdA-nSj4jfbc
"""

import random

with open("input_lab2.txt", "r") as f:  # input file colab a
    p, t = map(int, f.readline().strip().split()). #population r expected fitness
    s, pl = {}, []   #score


    for _ in range(p):
        n, r = f.readline().strip().split()
        s[n] = int(r)
        pl.append(n)  #player name list a add hocche


def c(p_list):     #playerlist
    s_p, sel = [], []



    for _ in range(p):
        n = random.choice(p_list)  #randomly player nicchi
        s_p.append(n)



    for i in range(p):
        sel.append(1 if p_list[i] in s_p else 0)  #plyr select hole 1, otherwise 0

    return sel



def fit(sel):
    return sum(s[pl[i]] for i in range(p) if sel[i] == 1)



def cross(parents):
    children = []  #empty list a store kortese



    for i in range(0, 4, 2):
        c_idx = random.randint(0, p-1)
        c_1 = parents[i][:c_idx] + parents[i+1][c_idx:]
        c_2 = parents[i+1][:c_idx] + parents[i][c_idx:]
        c_1, c_2 = mut(c_1, c_2)

        children.append(c_1)  #list a children adding
        children.append(c_2)



    return children




def mut(c_1, c_2):
    c_1[random.randint(0, p-1)] = random.randint(0, 1)
    c_2[random.randint(0, p-1)] = random.randint(0, 1)

    return c_1, c_2



def r_c(p_list):
    def note(lst):
        return ''.join(map(str, lst))

    parents_list = [c(p_list) for _ in range(4)]


    for _ in range(1000):  #run loop for 1000
        for parent in parents_list:
            if fit(parent) == t:  #parents fitness check
                return f'{pl}\n{note(parent)}'
        else:
            parents_list = cross(parents_list)  #target not reached, crossover for new children


    return f'{pl}\n-1'

print(r_c(pl))